@using Newtonsoft.Json
@using ViiaSample.Services
@model AccountViewModel

@{
    ViewBag.Title = "Accounts";
    Layout = "_Layout";
}

@Html.Hidden("EmailEnabled", Model.EmailEnabled)

<div class="container-fluid">
    <div class="row" style="padding: 1rem 3rem;">
        <button class="btn btn-outline-secondary" onclick="showViiaModal('@Model.ViiaConnectUrl')">Connect More Accounts via iframe</button>
        <button style="margin-left: 1rem;" class="btn btn-outline-secondary" onclick="window.location.href = '@Model.ViiaConnectUrl'">Connect More Accounts via redirect</button>
        @if (Model?.AccountsGroupedByProvider != null && Model.AccountsGroupedByProvider.Any())
        {
            <button style="margin-left: 1rem;" class="btn btn-outline-secondary" onclick="requestDataUpdateIframe()">Request Data Update IFrame</button>
            <button style="margin-left: 1rem;" class="btn btn-outline-secondary" onclick="requestDataUpdateRedirect()">Request Data Update Redirect</button>
        }
        @if (Model?.JwtToken != null)
        {
            <button style="margin-left: 1rem;" class="btn btn-outline-secondary" onclick="toggleModal('dataModal')">Toggle JWT Token payload</button>
        }
        <button id="email-button" style="margin-left: 1rem;" class="btn btn-outline-secondary" onclick="toggleEmail()">@(Model.EmailEnabled ? "Disable Email Notifications" : "Enable Email Notifications")</button>
    </div>
    <div class="row" style="padding: 0 3rem;">
        <div class="col">
            @if (Model?.AccountsGroupedByProvider == null || !Model.AccountsGroupedByProvider.Any())
            {
                <p class="text-center">
                    You don't seem to have any accounts connected, try adding some.
                </p>
            }
            else
            {
                foreach (var group in Model.AccountsGroupedByProvider)
                {
                    <div class="mb-4">
                        <div class="d-flex flex-column justify-content-between align-items-start">
                            <label class="form-check-label grey-text pb-1  provider-label" for="account-@group.Key">
                                @group.Key
                            </label>
                            @foreach (var account in Model.AccountsGroupedByProvider[group.Key])
                            {
                                <div class="d-flex w-100 open-sans-light text-description">
                                    <div
                                        class="d-flex flex-column account-container background justify-content-between w-100 align-items-start"
                                        onclick="window.location.href = '@Url.Action("Transactions", "Viia", new {accountId = account.Id})'">
                                        <label class="form-check-label text-description open-sans-bold" for="account-@account.Id">
                                            @account.Name
                                        </label>
                                        <div class="d-flex grey-text">
                                            <label class="mb-0" translate>Account Number</label>
                                            @if (account.Number?.Bban != null || account.Number?.Iban != null)
                                            {
                                                <label
                                                    class="pl-1 mb-0"
                                                    for="account-@account.Id">
                                                    @(account.Number.Bban ?? account.Number.Iban)
                                                </label>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<!-- Viia Modal -->
<div class="modal fade" id="viiaModal" tabindex="-1" role="dialog" aria-labelledby="viiaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div style="position: relative">
                <iframe id="viia-iframe" data-src="@Model.ViiaConnectUrl" style="position: absolute; top: 0px; width: 100%; height: 90vh;" frameborder="0" allowtransparency="true"></iframe>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<!-- /.modal -->

<div class="modal fade" id="dataModal" tabindex="-1" role="dialog" aria-labelledby="dataModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" style="padding: 2rem;">
            <div style="position: relative">
                <h5>Jwt access token payload</h5>
                <pre>@PrettifyJwtPayloadJson(Model?.JwtToken?.ToString())</pre>
                <h5>Refresh token payload</h5>
                <pre>@PrettifyJwtPayloadJson(Model?.RefreshToken?.ToString())</pre>
                <pre></pre>
            </div>
            <button class="btn btn-outline-danger" onclick="toggleModal('dataModal')">Close</button>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@functions
{
    string PrettifyJwtPayloadJson(string payload)
    {
        if (payload == null)
        {
            return string.Empty;
        }
        // JwtSecurityToken.ToString() returns "{algorithm json}.{payload Json}"
        var algorithmJson = payload.Split(".")[0];
        var payloadJson = payload.Split(".")[1];
        
        dynamic parsedAlgJson = JsonConvert.DeserializeObject(algorithmJson);
        dynamic parsedPayloadJson = JsonConvert.DeserializeObject(payloadJson);

        dynamic niceJsonObj = new {algorithm = parsedAlgJson, payload = parsedPayloadJson};
        
        return JsonConvert.SerializeObject(niceJsonObj, Formatting.Indented);
    }
}

@section Scripts
{
    <script>
        function updateEmailTexts() {
            var emailEnabled = $("#EmailEnabled").val() === 'true';
            var buttonText = emailEnabled ? "Disable Email Notifications" : "Enable Email Notifications";
            $("#email-button").text(buttonText);
        }
        
        function toggleModal(id) {
            $('#' + id).modal('toggle');
        }
        
        function showViiaModal(url) {
            var iframe = $('#viia-iframe');
            iframe.attr("src", url);
            $('#viiaModal').modal('show');
        }

        function bindEvent(element, eventName, eventHandler) {
            if (element.addEventListener) {
                element.addEventListener(eventName, eventHandler, false);
            } else if (element.attachEvent) {
                element.attachEvent('on' + eventName, eventHandler);
            }
        }

        $(document).ready(function() {
            bindEvent(window,
                'message',
                function(e) {
                    if (e.data === 'viia-login-done') {
                        $('#viiaModal').modal('hide');
                        window.location.href = '/viia/accounts/';
                    }
                });
        });

        function requestDataUpdateIframe() {
            $.ajax({
                url: '/viia/update',
                type: 'POST',
                dataType: "json",
                success: function(data) {
                    if (data.authUrl) {
                        // Auth url not empty or null means we need a supervised login
                        showViiaModal(data.authUrl);
                    } else {
                        alert("All accounts didn't require user-assisted authentication and were queued up for sync");
                        // refresh page?
                    }
                }
            });
        }
        
        function requestDataUpdateRedirect() {
                    $.ajax({
                        url: '/viia/update',
                        type: 'POST',
                        dataType: "json",
                        success: function(data) {
                            if (data.authUrl) {
                                // Auth url not empty or null means we need a supervised login
                                window.location.href = data.authUrl;
                            } else {
                                alert("All accounts didn't require user-assisted authentication and were queued up for sync");
                                // refresh page?
                            }
                        }
                    });
                }
        
        function toggleEmail() {
            $.ajax({
                url: '/viia/toggle-email',
                type: 'POST',
                dataType: "json",
                success: function(data) {
                    $("#EmailEnabled").val(data.updatedStatus);
                    updateEmailTexts();
                }
            });
        }
    </script>
}